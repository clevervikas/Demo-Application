(function ($) {
    jQuery.fn.inlineEditor = function (settings, arg) {
        var $editorObj, $this = $(this);
        var $editorObj = $this.data('inlineeditor');

        if (!$editorObj) {
            if (typeof settings != 'object') {
                console.error('Invalid attempt call InlineEditor when parent object is not initialized.');
                return this;
            }
            $this.data('inlineeditor', ($editorObj = new InlineEditor(this, settings)));
            $editorObj.init();
        }

        if (settings == 'enableAddModeAllRows' || settings.enableAddModeAllRows) {
            $editorObj.enableEditorsAllRows(true);
        }
        else if (settings == 'enableEditModeAllRows' || settings.enableEditModeAllRows) {
            $editorObj.enableEditorsAllRows(false);
        }
        else if (settings == 'addNewRow' || settings.addNewRow) {
            $editorObj.addNewRow(arg);

            return [];
        }
        else if (settings == 'getEditedData') {
            return $editorObj.getEditedData();
        }
        else if (settings == 'getEditedDataByRow') {
            return $editorObj.getEditedDataByRow(arg);
        }
        return this;
    }

    var InlineEditor = function (element, settings) {
        this.$element = element;
        this.$settings = settings;
    };

    InlineEditor.prototype = function () {
        var _listData = [], _hideEditorOnBlur, _hasAlwaysVisibleCols = false, formElements = new FormElements();

        var init = function () {
            var that = this;
            _hideEditorOnBlur = false;

            that.$element.find('tbody > tr > td .inline-editor').remove();
            enableAlwaysVisibleColumnEditors();
            addEventListners();

            function enableAlwaysVisibleColumnEditors() {
                that.$element.find('tbody > tr').each(function (idx, row) {
                    row = $(row);
                    row.find('td').each(function (idx, cell) {
                        var colProperties = getActiveColumnProperties(that, $(this).index());
                        if (colProperties.editable && colProperties.alwaysVisible) {
                            _hasAlwaysVisibleCols = true;
                            initEnableEditor(that, row, $(cell), false);
                        }
                    });
                });
            }
            function addEventListners() {
                that.$element.off('click');
                $(document).off('change', '.row-check');
                $(document).off('blur', '.inline-editor:not(.select.inline-editor):not(.datepicker):not(.timepicker):not(.timepicker24)');
                $(document).off('change', '.select.inline-editor,.datepicker.inline-editor,.timepicker.inline-editor,.timepicker24.inline-editor');

                that.$element.on('click', 'td', function (e) {
                    if (!($(e.target).is('.btnDeleteRow') || $(e.target).parent().is('.btnDeleteRow')) && !($(e.target).is('.btnRowRefresh') || $(e.target).parent().is('.btnRowRefresh'))) {
                        if ($(e.target).is('.btnAddRow') || $(e.target).parent().is('.btnAddRow')) {
                            _hideEditorOnBlur = false;
                            enableEditorsPerRow(that, $(this).closest('tr'), true);
                            return;
                        }
                        if ($(e.target).is('.btnEditRow') || $(e.target).parent().is('.btnEditRow')) {
                            _hideEditorOnBlur = false;
                            enableEditorsPerRow(that, $(this).closest('tr'), false);
                            return;
                        }
                        else {
                            try {
                                var $btnrow = $(this).closest('tr').find('.btnEditRow');
                                if ($btnrow.is(':visible'))
                                    $btnrow.click();
                            } catch (e) { }

                        }
                        if (!$(e.target).is('td'))
                            return;
                        var activeRow = $(this).closest('tr');
                        if (activeRow.find('.row-check').length && !activeRow.find('.row-check').prop('checked')) {
                            return;
                        }

                        var colProperties = getActiveColumnProperties(that, $(this).index());
                        if (colProperties.editable) {
                            if (that.$settings.enableActiveRowEditorsOnOneClick) {
                                _hideEditorOnBlur = false;
                                if (!activeRow.data('editModeEnabled')) {
                                    $.each(that.$settings.columns, function (idx, col) {
                                        if (col.editable) {
                                            editableCell = activeRow.find('td:eq(' + idx + ')');
                                            initEnableEditor(that, activeRow, editableCell, false);
                                        }
                                    });
                                    activeRow.data('editModeEnabled', true);
                                }
                            }
                            else {
                                _hideEditorOnBlur = that.$settings.hideEditorOnBlur == undefined ? true : that.$settings.hideEditorOnBlur;
                                if (_hideEditorOnBlur) {
                                    $('.inline-editor:not(.always-visible)').each(function () {
                                        var target = $(this);
                                        var parentCell = target.closest('td');
                                        var cellText = getText(target, colProperties.name, colProperties.editorType);
                                        parentCell.empty();
                                        parentCell.text(cellText);
                                        parentCell.removeData('editorVisible');
                                        target.remove();
                                    });
                                }
                                initEnableEditor(that, $(this).closest('tr'), $(this), true);
                                activeRow.data('editModeEnabled', true);
                            }
                        }
                    }
                });
                $(document).on('change', '.row-check', function (e) {
                    e.stopPropagation();
                    if ($(this).is(':checked')) {
                        $(this).closest('tr').find('.inline-editor:not(.row-check)').prop('disabled', false).removeClass('disabled');
                    }
                    else
                        $(this).closest('tr').find('.inline-editor:not(.row-check)').prop('disabled', true).addClass('disabled');
                });
                $(document).on('blur', '.inline-editor:not(.select.inline-editor):not(.datepicker):not(.timepicker):not(.timepicker24)', function (e) {
                    e.stopPropagation();
                    handleBlur(that, $(this));
                });
                $(document).on('change', '.select.inline-editor:not(.select2-hidden-accessible),.datepicker.inline-editor,.timepicker.inline-editor,.timepicker24.inline-editor', function (e) {
                    e.stopPropagation();
                    handleBlur(that, $(this));
                });
            }
        },

        handleBlur = function (that, target) {
            var parentCell = target.closest('td');
            var colProperties = getActiveColumnProperties(that, parentCell.index());
            var dataModified = false;

            if (!validateEntry(target)) {
                target.val('');
                target.focus();
                globalFunctions.showWarningMessage("Invalid entry");
                return;
            }

            var editedVal = getValue(target, colProperties.editorType, colProperties.attributes);
            if (colProperties.editorType == 'checkbox')
                dataModified = true;
            else {
                if (parentCell.data('prevData') != undefined && parentCell.data('prevData') != null) {
                    if (editedVal != parentCell.data('prevData')) {
                        dataModified = true;
                    }
                }
                else {
                    if (editedVal != undefined && editedVal.length > 0) {
                        dataModified = true;
                    }
                }
            }

            if (_hideEditorOnBlur && target.is('.inline-editor:not(.row-check):not(.always-visible)')) {
                var cellText = getText(target, colProperties.name, colProperties.editorType);
                parentCell.empty();
                parentCell.text(cellText);
                parentCell.removeData('editorVisible');
                target.remove();
                $('[data-id=' + target.attr('id') + ']').remove();
            }

            if (dataModified) {
                parentCell.attr('data-id', editedVal);
                parentCell.data('modified', true);
                if (target.is('.inline-editor:not(.row-check)')) {
                    // these will affect on row edit
                }
                parentCell.setModified();
                that.$element.trigger("inlineeditor:dataedited", [colProperties.name, parentCell, parentCell.text()]);
            }
            parentCell.data('prevData', editedVal);
        },

        initEnableEditor = function (that, activeRow, activeCell, setFocus) {
            var activeColumn = getActiveColumnProperties(that, activeCell.index());

            if (!activeCell.data('editorVisible')) {
                enableEditor(that, activeRow.index(), activeCell, activeColumn);
                activeCell.data('editorVisible', true);
            }
            if (setFocus) {
                var editor = activeRow.find('.inline-editor:not(.select.inline-editor)[id$=_' + activeColumn.name + ']');
                if (editor.length) {
                    editor.select();
                    editor.focus();
                }
            }
        },

        getActiveColumnProperties = function (that, index) {
            return that.$settings.columns[index];
        },

        enableEditor = function (that, rowIndex, cell, colProperties) {
            var editor;
            var editorId = 'editor_' + rowIndex + '_' + colProperties.name;
            var editorType = colProperties.editorType.toLowerCase();
            var cellText = cell.text().trim();
            cell.html('');

            if (editorType == 'text' || editorType == 'numeric') {
                editor = $('<input type="textbox" class="form-control" />').attr({ 'id': editorId });

                if (colProperties.maxLength)
                    editor.attr('maxlength', colProperties.maxLength);
                cell.append(editor);
                editor.val(cellText);
            }
            else if (editorType == 'datepicker' || editorType == 'timepicker' || editorType == 'timepicker24') {
                editor = $('<input type="textbox" class="form-control ' + editorType + '" />').attr({ 'id': editorId });
                cell.append(editor);
                editor.val(cellText);
            }
            else if (editorType == 'textarea') {
                if (colProperties.attributes == undefined || colProperties.attributes == null)
                    colProperties.attributes = [];
                colProperties.attributes['id'] = editorId;
                editor = $('<textarea></textarea>').attr(colProperties.attributes);
                cell.append(editor);

                if (colProperties.maxLength != undefined && colProperties.maxLength != null) {
                    setTimeout(function () {
                        editor.maxlength({ max: colProperties.maxLength, feedbackText: colProperties.feedbackText });
                    }, 100);
                }
                editor.val(cellText);
            }
            else if (editorType == 'checkbox') {
                editor = $('<input type="checkbox" class="checkbox-inline" />').attr({ 'id': editorId });
                cell.append(editor);
            }

            else if (editorType == 'list') {
                if (colProperties.searchable == true)
                    editor = $('<select class="form-control select" data-live-search="true" />').attr({ 'id': editorId });
                else
                    editor = $('<select class="form-control select" />').attr({ 'id': editorId });
                cell.append(editor);

                var lData = _listData[colProperties.name];
                if (lData == undefined || colProperties.reloadList == true) {
                    $.ajax({
                        type: 'POST',
                        url: colProperties.listSourceUrl,
                        async: false,
                        contentType: 'application/json',
                        success: function (data) {
                            if (data != undefined) {
                                if (!isMultiSelectable(colProperties.attributes)) {
                                    data.unshift({ ItemName: "Select" });
                                }
                                _listData[colProperties.name] = data;
                                formElements.feReloadSelect(editorId, data, 'Select', false, cellText);
                            }
                        },
                        error: function (data, xhr, status) {
                            globalFunctions.onFailure(data, xhr, status);
                        }
                    });
                }
                else {
                    formElements.feReloadSelect(editorId, lData, '', false);
                }
            }

            if (editor != undefined) {
                colProperties = mergePropertyToAttributes(colProperties, 'readonly');

                if (colProperties.attributes != undefined) {
                    editor.attr(colProperties.attributes);
                }

                editor.addClass('inline-editor');
                if (colProperties.alwaysVisible)
                    editor.addClass('always-visible');
                editor.data('type', editorType);
                editor.data('validators', colProperties.validators);
                editor.css('width', '100%');

                if (editorType == 'list') {
                    var dataIdAttr = editor.closest('td').attr('data-id');
                    if (typeof dataIdAttr !== typeof undefined && dataIdAttr !== false) {
                        if (colProperties.attributes != undefined && colProperties.attributes.multiple == true)
                            editor.val(dataIdAttr.split(','));
                        else
                            editor.val(dataIdAttr);
                    }
                    else
                        editor.val(cellText);

                    formElements.feSelect(cellText, '#' + editorId);


                    editor.off('tagchanged');
                    editor.on('tagchanged', function (e) {
                        e.stopPropagation();
                        var editedValue = $(this).val();
                        if (editedValue != undefined && editedValue != null)
                            editedValue = editedValue.join(',');

                        cell.data('modified', true);
                        cell.attr('data-id', editedValue);
                        cell.setModified();
                        that.$element.trigger("inlineeditor:dataedited", [colProperties.name, cell, editedValue]);
                    });
                }
                else if (editorType == 'datepicker') {
                    if (cellText.length > 0)
                        editor.val(cellText);
                    else
                        editor.val(getCurrentDateDDMMYYY());
                    editor.data('dateformat', 'dd/mm/yyyy');
                    //formElements.feDatepicker('#' + editorId, 'dd-M-yyyy', 'DD-MMM-YYYY');
                    formElements.feDatepicker('#' + editorId);
                }
                else if (editorType == 'timepicker' || editorType == 'timepicker24') {
                    editor.val(cellText);
                    editor.addClass(editorType);
                    formElements.feTimepicker();
                }
                else if (editorType == 'checkbox')
                    editor.prop('checked', cellText != undefined && (cellText.toLowerCase() === 'true' || cellText === '1'))
                else
                    editor.val(cellText);

                cell.data('prevData', getValue(editor, colProperties.editorType, colProperties.attributes));
            }
            else
                cell.html(cellText);
        },

        mergePropertyToAttributes = function (colProperties, source) {
            if (colProperties[source] != undefined) {
                if (colProperties.attributes == undefined) {
                    colProperties.attributes = {};
                }
                colProperties.attributes[source] = colProperties[source];
            }
            return colProperties;
        },

        isMultiSelectable = function (attributes) {
            var multiSelectable;
            if (attributes != null && attributes != undefined)
                multiSelectable = attributes.multiple;
            return multiSelectable;
        },

        validateEntry = function (editor) {
            var editorType = editor.data('type');
            var validators = editor.data('validators');
            var isValid = false;
            var val = editor.val() != undefined && editor.val().length > 0 ? editor.val() : undefined;

            if (validators != undefined && validators != null && !validators.length) {
                validators = validators.split(',');
            }
            if (editorType == 'text' || editorType == 'textarea' || editorType == 'list'
                || $('#' + editor.find('button').attr('data-id')).data('type') == 'list'
                || editorType == 'timepicker' || editorType == 'timepicker24' || editorType == 'checkbox') {
                isValid = true;
            }
            else if (editorType == 'numeric') {
                isValid = val == '' || val == null || val == undefined || globalFunctions.isNumber(editor.val());
            }
            else if (editorType == 'datepicker') {
                if (!(isValid = val == '' || val == null || val == undefined)) {// || moment(editor.val(), editor.data('dateformat'), true).isValid();
                    isValid = true;
                }
            }

            return isValid;
        },

        addNewRow = function (attributes) {
            var that = this;
            var newRow = $('<tr />');
            if (attributes != undefined) newRow.attr(attributes);

            that.$element.find('tbody').append(newRow);
            that.$element.find('thead > tr > th').each(function () {
                newRow.append($('<td />'));
            });
            enableEditorsPerRow(that, newRow, true);
        },

        enableEditorsAllRows = function (isAddMode) {
            var that = this;
            _hideEditorOnBlur = false;
            this.$element.find('tbody > tr').each(function (idx, row) {
                enableEditorsPerRow(that, $(this), isAddMode);
            });
        },

        enableEditorsPerRow = function (that, row, isAddMode) {
            var dataIdReset = false;
            row.find('td').each(function (idx, cell) {
                cell = $(cell);
                if (getActiveColumnProperties(that, $(this).index()).editable) {
                    if (isAddMode) {
                        cell.removeHighlight();
                        cell.removeData('editorVisible');
                        cell.text('');
                        cell.removeAttr('data-id');
                        if (!dataIdReset && row.attr('data-id') != undefined) {
                            var dataId = row.data('id'); // parsed Json object
                            dataId.Id = 0;
                            row.attr('data-id', JSON.stringify(dataId));

                            dataIdReset = true;
                        }
                    }
                    initEnableEditor(that, row, cell, false);
                }
            });
            if (row.find('.row-check').length && !row.find('.row-check').prop('checked'))
                row.find('.inline-editor:not(.row-check)').prop('disabled', true).addClass('disabled');
            row.data('editModeEnabled', true);
        },

        getValue = function (editor, editorType, attributes) {
            var editedValue;
            if (editorType == 'checkbox') {
                editedValue = editor.prop('checked');
            }
            else {
                editedValue = editor.val();
                if (editorType == 'list' && attributes != undefined && attributes.multiple == true) {
                    if (editedValue != undefined && editedValue != null)
                        editedValue = editedValue.join(',');
                }
            }
            return editedValue;
        },

        getValueFromCell = function (cell, editorType) {
            var editedValue;
            if (editorType == 'list')
                editedValue = cell.attr('data-id');
            else
                editedValue = cell.text();

            return editedValue;
        },

        getText = function (editor, name, editorType) {
            var editedValue = '';
            if (editorType == 'checkbox')
                editedValue = editor.prop('checked');
            else if (editorType == 'list') {
                editor.find('option:selected').each(function () {
                    editedValue += (editedValue != '' ? ',' : '') + $(this).text();
                });
            }
            else
                editedValue = editor.val();
            return editedValue;
        },

        getEditedData = function () {
            var that = this;
            editedData = [];
            this.$element.find('tbody > tr').each(function (idx, row) {
                var editedRowData = that.getEditedDataByRow($(row));
                if (editedRowData != undefined)
                    editedData.push(editedRowData);
            });

            return editedData;
        },

        getEditedDataByRow = function (row) {
            var that = this;
            var editedRowData = {};
            if (row.data('editModeEnabled') || _hasAlwaysVisibleCols) {
                var rowCheckBox = row.find('.row-check.inline-editor');
                var atleastOneColumnEdited = false;
                editedRowData['Id'] = row.attr('data-id');

                row.find('td').each(function (idx, cell) {
                    cell = $(cell);
                    if (!rowCheckBox.length || (rowCheckBox.length && rowCheckBox.prop('checked'))
                        || cell.find('.inline-editor').is('.row-check')) {
                        var col = getActiveColumnProperties(that, cell.index());
                        if (col.editable) {
                            if (cell.data('modified')) {
                                editedRowData[col.name] = cell.attr('data-id');
                                atleastOneColumnEdited = true;
                            }
                            else if (cell.data('editorVisible')) {
                                editedRowData[col.name] = getValue(cell.find('.inline-editor'), col.editorType, col.attributes);
                            } else {
                                editedRowData[col.name] = getValueFromCell(cell, col.editorType);
                            }
                        }
                    }
                });
            }
            if (!atleastOneColumnEdited) {
                editedRowData = undefined;
            } else {

            }
            return editedRowData;
        };
        return {
            init: init,
            addNewRow: addNewRow,
            enableEditorsAllRows: enableEditorsAllRows,
            getEditedData: getEditedData,
            getEditedDataByRow: getEditedDataByRow
        }
    }();
}(jQuery));


